$date
	Mon Jun 12 21:06:01 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module testbench $end
$var reg 1 ! clock_tb $end
$var reg 1 " rst_n_tb $end
$scope module riscv $end
$var wire 1 ! clk $end
$var wire 64 # d_mem_data [63:0] $end
$var wire 1 " rst_n $end
$var wire 32 $ i_mem_data [31:0] $end
$var wire 6 % i_mem_addr [5:0] $end
$var wire 1 & d_mem_we $end
$var wire 6 ' d_mem_addr [5:0] $end
$scope module mem $end
$var wire 64 ( d_mem_data [63:0] $end
$var wire 64 ) data_in [63:0] $end
$var wire 32 * i_mem_data [31:0] $end
$var wire 6 + i_mem_addr [5:0] $end
$var wire 64 , data_out [63:0] $end
$var wire 1 & d_mem_we $end
$var wire 6 - d_mem_addr [5:0] $end
$scope module d_mem $end
$var wire 64 . din [63:0] $end
$var wire 64 / dout [63:0] $end
$var wire 1 & we $end
$var wire 6 0 ads [5:0] $end
$upscope $end
$scope module i_mem $end
$var wire 32 1 dout [31:0] $end
$var wire 3 2 funct3 [2:0] $end
$var wire 1 3 funct7 $end
$var wire 7 4 opcode [6:0] $end
$var wire 5 5 rd [4:0] $end
$var wire 5 6 rs1 [4:0] $end
$var wire 5 7 rs2 [4:0] $end
$var wire 6 8 ads [5:0] $end
$upscope $end
$upscope $end
$scope module prv $end
$var wire 1 ! clk $end
$var wire 64 9 d_mem_data [63:0] $end
$var wire 32 : i_mem_data [31:0] $end
$var wire 1 " rst_n $end
$var wire 1 ; rf_we $end
$var wire 1 < rf_src $end
$var wire 1 = pc_src $end
$var wire 7 > opcode [6:0] $end
$var wire 6 ? i_mem_addr [5:0] $end
$var wire 1 & d_mem_we $end
$var wire 6 @ d_mem_addr [5:0] $end
$var wire 1 A alu_src $end
$var wire 4 B alu_flags [3:0] $end
$var wire 4 C alu_cmd [3:0] $end
$scope module fd_inst $end
$var wire 1 ! clk $end
$var wire 64 D d_mem_data [63:0] $end
$var wire 32 E i_mem_data [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 F somaimm [31:0] $end
$var wire 32 G somafour [31:0] $end
$var wire 1 ; rf_we $end
$var wire 1 < rf_src $end
$var wire 64 H res [63:0] $end
$var wire 1 = pc_src $end
$var wire 7 I opcode [6:0] $end
$var wire 64 J imm [63:0] $end
$var wire 6 K i_mem_addr [5:0] $end
$var wire 1 L funct7 $end
$var wire 3 M funct3 [2:0] $end
$var wire 32 N doutIR [31:0] $end
$var wire 64 O doutB [63:0] $end
$var wire 64 P doutA [63:0] $end
$var wire 1 & d_mem_we $end
$var wire 6 Q d_mem_addr [5:0] $end
$var wire 1 R clock $end
$var wire 1 A alu_src $end
$var wire 4 S alu_flags [3:0] $end
$var wire 4 T alu_control [3:0] $end
$var wire 4 U alu_cmd [3:0] $end
$var wire 32 V S3 [31:0] $end
$var wire 64 W S2 [63:0] $end
$var wire 64 X S1 [63:0] $end
$var wire 5 Y Rw [4:0] $end
$var wire 5 Z Rb [4:0] $end
$var wire 5 [ Ra [4:0] $end
$var wire 32 \ PC [31:0] $end
$var reg 2 ] contador_clock [1:0] $end
$scope module crtl $end
$var wire 1 L funct7 $end
$var wire 3 ^ funct3 [2:0] $end
$var wire 4 _ control [3:0] $end
$var wire 4 ` alu_cmd [3:0] $end
$upscope $end
$scope module hii $end
$var wire 32 a palavra [31:0] $end
$var wire 7 b opcode [6:0] $end
$var wire 20 c imm_field_typeB [19:0] $end
$var wire 12 d imm_field_typeA [11:0] $end
$var wire 64 e imm [63:0] $end
$upscope $end
$scope module huu $end
$var wire 1 R clock $end
$var wire 32 f data_in [31:0] $end
$var wire 5 g rs2 [4:0] $end
$var wire 5 h rs1 [4:0] $end
$var wire 5 i rd [4:0] $end
$var wire 7 j opcode [6:0] $end
$var wire 1 L funct7 $end
$var wire 3 k funct3 [2:0] $end
$var reg 32 l data_out [31:0] $end
$upscope $end
$scope module ihs $end
$var wire 1 = zero $end
$var wire 32 m imm_some [31:0] $end
$var wire 32 n four_some [31:0] $end
$var wire 32 o S3 [31:0] $end
$upscope $end
$scope module its $end
$var wire 64 p imm [63:0] $end
$var wire 32 q soma [31:0] $end
$var wire 32 r PC [31:0] $end
$upscope $end
$scope module itt $end
$var wire 32 s soma [31:0] $end
$var wire 32 t dout_pc [31:0] $end
$upscope $end
$scope module uhh $end
$var wire 1 R clock $end
$var wire 32 u data_in [31:0] $end
$var reg 32 v data_out [31:0] $end
$upscope $end
$scope module utt $end
$var wire 5 w Ra [4:0] $end
$var wire 5 x Rb [4:0] $end
$var wire 5 y Rw [4:0] $end
$var wire 1 R clk $end
$var wire 64 z doutA [63:0] $end
$var wire 64 { doutB [63:0] $end
$var wire 1 ; we $end
$var wire 64 | din [63:0] $end
$upscope $end
$scope module utv $end
$var wire 64 } doutB [63:0] $end
$var wire 64 ~ imm [63:0] $end
$var wire 1 A sinalMux $end
$var wire 64 !" S1 [63:0] $end
$upscope $end
$scope module uut $end
$var wire 64 "" a [63:0] $end
$var wire 64 #" b [63:0] $end
$var wire 4 $" sinal [3:0] $end
$var wire 1 %" zero $end
$var wire 1 &" soma_ $end
$var wire 64 '" soma [63:0] $end
$var wire 1 (" overflow $end
$var wire 4 )" alu_flags [3:0] $end
$var wire 1 *" MSB $end
$upscope $end
$scope module uvv $end
$var wire 64 +" doutMem [63:0] $end
$var wire 64 ," soma [63:0] $end
$var wire 1 < rf_src $end
$var wire 64 -" S2 [63:0] $end
$upscope $end
$upscope $end
$scope module uc_inst $end
$var wire 4 ." alu_flags [3:0] $end
$var wire 1 ! clk $end
$var wire 7 /" opcode [6:0] $end
$var wire 1 " rst_n $end
$var wire 4 0" state_reg [3:0] $end
$var wire 1 ; rf_we $end
$var wire 1 < rf_src $end
$var wire 1 = pc_src $end
$var wire 1 & d_mem_we $end
$var wire 1 A alu_src $end
$var wire 4 1" alu_cmd [3:0] $end
$scope module sm $end
$var wire 1 ! clk $end
$var wire 1 2" reset $end
$var reg 4 3" state_next [3:0] $end
$var reg 4 4" state_reg [3:0] $end
$upscope $end
$scope module uc $end
$var wire 4 5" alu_flags [3:0] $end
$var wire 1 ! clk $end
$var wire 7 6" opcode [6:0] $end
$var wire 4 7" state_reg [3:0] $end
$var wire 1 ; weReg $end
$var wire 1 & weMem $end
$var wire 4 8" alu_cmd [3:0] $end
$var wire 1 < Mux2 $end
$var wire 1 A Mux1 $end
$var reg 1 = Mux3 $end
$var reg 9 9" control_UC [8:0] $end
$var reg 7 :" reg_opcode [6:0] $end
$var reg 1 ;" weIR $end
$var reg 1 <" wePc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x<"
x;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bz 5"
bx 4"
bx 3"
12"
bx 1"
bx 0"
bx /"
b0xxx ."
bx -"
bx ,"
bx +"
x*"
b0xxx )"
x("
bx '"
x&"
x%"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
b0 v
bx u
b0 t
b100 s
b0 r
bx q
bx p
bx o
b100 n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b100010000001001100011 f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
b0 \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
b0xxx S
0R
bx Q
bx P
bx O
bx N
bx M
xL
b0 K
bx J
bx I
bx H
b100 G
bx F
b100010000001001100011 E
bx D
bx C
b0xxx B
xA
bx @
b0 ?
bx >
x=
x<
x;
b100010000001001100011 :
bx 9
b0 8
bz 7
bz 6
bz 5
bz 4
z3
bz 2
b100010000001001100011 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
b100010000001001100011 *
bx )
bx (
bx '
x&
b0 %
b100010000001001100011 $
bx #
0"
0!
$end
#10
b0 0"
b0 4"
b0 7"
b1 ]
b0 3"
02"
1!
1"
#20
b10 ]
0!
#30
b10 d
b100010000 c
b0x00x X
b0x00x !"
b0x00x #"
b1000 J
b1000 e
b1000 p
b1000 ~
bx G
bx n
bx s
bx $
bx *
bx 1
bx :
bx E
bx f
b0xxxx %
b0xxxx +
b0xxxx 8
b0xxxx ?
b0xxxx K
b100 Y
b100 i
b100 y
b1 P
b1 z
b1 ""
b10 [
b10 h
b10 w
b1 O
b1 {
b1 }
b1 Z
b1 g
b1 x
b1100011 >
b1100011 I
b1100011 b
b1100011 j
b1100011 /"
b1100011 6"
0L
b0 M
b0 ^
b0 k
b0xxxxxx \
b0xxxxxx r
b0xxxxxx t
b0xxxxxx v
b100010000001001100011 N
b100010000001001100011 a
b100010000001001100011 l
b1 0"
b1 4"
b1 7"
1R
b11 ]
b1 3"
1!
#40
0R
b0 ]
0!
#50
b10 0"
b10 4"
b10 7"
b1 ]
b10 3"
1!
#60
b10 ]
0!
#70
bx X
bx !"
bx #"
bx J
bx e
bx p
bx ~
bx c
bx d
bx Y
bx i
bx y
bx P
bx z
bx ""
bx [
bx h
bx w
bx O
bx {
bx }
bx Z
bx g
bx x
bx >
bx I
bx b
bx j
bx /"
bx 6"
xL
bx M
bx ^
bx k
bx N
bx a
bx l
b1100011 :"
b11 0"
b11 4"
b11 7"
1R
b11 ]
b11 3"
1!
#80
0R
b0 ]
0!
#90
b110 T
b110 _
b110 $"
b11 C
b11 U
b11 `
b11 1"
b11 8"
0A
0&
0;
b100 0"
b100 4"
b100 7"
b0x00011 9"
0=
b1 ]
b100 3"
1!
#100
b10 ]
0!
#110
b0 0"
b0 4"
b0 7"
1R
b11 ]
b0 3"
1!
#120
0R
b0 ]
0!
#130
b1 0"
b1 4"
b1 7"
b1 ]
b1 3"
1!
#140
b10 ]
0!
#150
b10 0"
b10 4"
b10 7"
1R
b11 ]
b10 3"
1!
#160
0R
b0 ]
0!
#170
b11 0"
b11 4"
b11 7"
bx :"
b1 ]
b11 3"
1!
#180
b10 ]
0!
#190
bx T
bx _
bx $"
bx C
bx U
bx `
bx 1"
bx 8"
xA
x&
x;
b0xxxxxxxx 9"
b100 0"
b100 4"
b100 7"
1R
b11 ]
b100 3"
1!
#200
0R
b0 ]
0!
